<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <!-- Sources
        https://www.ato.gov.au/
        https://oac.chris21.com/OAC_ichrisp/Help/ichrisUG/646250.htm
    -->
    <!-- Extra Pay Rule for inputs -->
    <record id="l10n_au_extra_pay_structure_1" model="hr.salary.rule">
        <field name="category_id" ref="hr_payroll.GROSS"/>
        <field name="name">Extra Pay</field>
        <field name="code">GROSS.COMMISSION</field>
        <field name="sequence">99</field>
        <field name="condition_select">python</field>
        <field name="condition_python">result = 'EXTRA' in inputs</field>
        <field name="amount_select">code</field>
        <field name="amount_python_compute">
result = inputs['EXTRA'].amount
result_name = inputs['EXTRA'].name
        </field>
        <field name="struct_id" ref="l10n_au_hr_payroll.hr_payroll_structure_au_regular"/>
        <field name="appears_on_payroll_report" eval="True"/>
    </record>

    <record id="l10n_au_salary_sacrifice_structure_1" model="hr.salary.rule">
        <field name="category_id" ref="l10n_au_hr_payroll.rule_category_salary_sacrifice"/>
        <field name="name">Salary Sacrifice</field>
        <field name="code">SALARY.SACRIFICE</field>
        <field name="sequence">99</field>
        <field name="condition_select">python</field>
        <field name="condition_python">result = contract.l10n_au_salary_sacrifice_superannuation or contract.l10n_au_salary_sacrifice_other</field>
        <field name="amount_select">code</field>
        <field name="amount_python_compute">
net_salary = categories['BASIC'] + categories['ALW'] + categories['DED']
sacrifice = contract.l10n_au_salary_sacrifice_superannuation + contract.l10n_au_salary_sacrifice_other
result = -min(net_salary, sacrifice)
        </field>
        <field name="struct_id" ref="l10n_au_hr_payroll.hr_payroll_structure_au_regular"/>
    </record>
    <!-- Update Gross to include Salary Sacrifice -->
    <function model="hr.salary.rule" name="write">
        <value model="hr.salary.rule" search="[
            ('struct_id', '=', ref('l10n_au_hr_payroll.hr_payroll_structure_au_regular')),
            ('code', '=', 'GROSS')]"/>
        <value eval="{
            'amount_python_compute': &quot;result = categories['BASIC'] + categories['ALW'] + categories['SALARY.SACRIFICE']&quot;
        }"/>
    </function>
    <!-- Schedule 1 - Statement of formulas for calculating amounts to be withheld -->
    <record id="l10n_au_withholding_structure_1" model="hr.salary.rule">
        <field name="category_id" ref="l10n_au_hr_payroll.rule_category_withholding"/>
        <field name="name">PAYG Withholding</field>
        <field name="code">WITHHOLD</field>
        <field name="sequence">100</field>
        <field name="amount_select">code</field>
        <field name="amount_python_compute">
coefficients = payslip._rule_parameter("l10n_au_withholding_coefficients")["regular"]
result = -payslip._l10n_au_compute_withholding_amount(categories['GROSS'], contract.schedule_pay, coefficients)
        </field>
        <field name="struct_id" ref="l10n_au_hr_payroll.hr_payroll_structure_au_regular"/>
    </record>

    <record id="l10n_au_leave_loading_lump_structure_1" model="hr.salary.rule">
        <field name="category_id" ref="l10n_au_hr_payroll.rule_category_withholding"/>
        <field name="name">Leave Loading Withholding</field>
        <field name="code">LEAVE.LOAD</field>
        <field name="sequence">101</field>
        <field name="condition_select">python</field>
        <field name="condition_python">result = inputs.get("LEAVE.LOAD") and inputs.get("LEAVE.LOAD").amount</field>
        <field name="amount_select">code</field>
        <field name="amount_python_compute">
result = compute_leave_loading_withhold(payslip, employee, inputs["LEAVE.LOAD"].amount, contract.schedule_pay)
        </field>
        <field name="struct_id" ref="l10n_au_hr_payroll.hr_payroll_structure_au_regular"/>
    </record>

    <record id="l10n_au_withholding_extra_structure_1" model="hr.salary.rule">
        <field name="category_id" ref="l10n_au_hr_payroll.rule_category_withholding"/>
        <field name="name">Extra Withholding (53 pays)</field>
        <field name="code">WITHHOLD.EXTRA</field>
        <field name="sequence">102</field>
        <field name="condition_select">python</field>
        <field name="condition_python">
if contract.schedule_pay not in ["weekly", "fortnightly"]:
    result = False
else:
    weekly_min_amount = payslip._rule_parameter("l10n_au_extra_withholding")[contract.schedule_pay][0][0]
    result = employee.l10n_au_extra_pay and payslip._l10n_au_has_extra_pay() and categories['BASIC'] &gt; weekly_min_amount
        </field>
        <field name="amount_select">code</field>
        <field name="amount_python_compute">
weekly_earnings = compute_earning(categories['BASIC'], contract.schedule_pay)
brackets = payslip._rule_parameter("l10n_au_extra_withholding")[contract.schedule_pay]
for bracket in brackets:
    if bracket[1] == "inf" or weekly_earnings &lt; bracket[1] and weekly_earnings &gt; bracket[0]:
        result = bracket[2]
        break
        </field>
        <field name="struct_id" ref="l10n_au_hr_payroll.hr_payroll_structure_au_regular"/>
    </record>

    <record id="l10n_au_allowance_withholding_structure_1" model="hr.salary.rule">
        <field name="category_id" ref="l10n_au_hr_payroll.rule_category_withholding"/>
        <field name="name">Withholding for allowances</field>
        <field name="code">WITHHOLD.ALW</field>
        <field name="sequence">103</field>
        <field name="condition_select">python</field>
        <field name="condition_python">result = payslip.l10n_au_allowance_withholding</field>
        <field name="amount_select">code</field>
        <field name="amount_python_compute">result = -payslip.l10n_au_allowance_withholding</field>
        <field name="struct_id" ref="l10n_au_hr_payroll.hr_payroll_structure_au_regular"/>
        <field name="appears_on_payroll_report">False</field>
    </record>

    <record id="l10n_au_loan_withholding_structure_1" model="hr.salary.rule">
        <field name="category_id" ref="l10n_au_hr_payroll.rule_category_withholding"/>
        <field name="name">Withholding for study and training support loans</field>
        <field name="code">WITHHOLD.STUDY</field>
        <field name="sequence">104</field>
        <field name="condition_select">python</field>
        <field name="condition_python">result = employee.l10n_au_training_loan</field>
        <field name="amount_select">code</field>
        <field name="amount_python_compute">
coefficients = payslip._rule_parameter("l10n_au_stsl")["1" if employee.l10n_au_scale == "1" else "2"]
result = -payslip._l10n_au_compute_loan_withhold(categories['GROSS'], contract.schedule_pay, coefficients)
        </field>
        <field name="struct_id" ref="l10n_au_hr_payroll.hr_payroll_structure_au_regular"/>
        <field name="appears_on_payroll_report">False</field>
    </record>

    <record id="l10n_au_tax_offset_structure_1" model="hr.salary.rule">
        <field name="category_id" ref="l10n_au_hr_payroll.rule_category_withholding_offsets"/>
        <field name="name">Tax Offsets</field>
        <field name="code">TAX.OFFSET</field>
        <field name="sequence">152</field>
        <field name="condition_select">python</field>
        <field name="condition_python">result = employee.l10n_au_nat_3093_amount</field>
        <field name="amount_select">code</field>
        <field name="amount_python_compute">
if contract.schedule_pay == "weekly":
    result = round(0.019 * employee.l10n_au_nat_3093_amount)
elif contract.schedule_pay == "bi-weekly":
    result = round(0.038 * employee.l10n_au_nat_3093_amount)
elif contract.schedule_pay == "monthly":
    result = round(0.083 * employee.l10n_au_nat_3093_amount)
elif contract.schedule_pay == "quarterly":
    result = round(0.25 * employee.l10n_au_nat_3093_amount)
        </field>
        <field name="struct_id" ref="l10n_au_hr_payroll.hr_payroll_structure_au_regular"/>
    </record>

    <record id="l10n_au_medicare_structure_1" model="hr.salary.rule">
        <field name="category_id" ref="l10n_au_hr_payroll.rule_category_withholding_offsets"/>
        <field name="name">Medicare Adjustment</field>
        <field name="code">MEDICARE</field>
        <field name="sequence">153</field>
        <field name="condition_select">python</field>
        <field name="condition_python">result = employee.l10n_au_scale in ["2", "6"]</field>
        <field name="amount_select">code</field>
        <field name="amount_python_compute">
params = payslip._rule_parameter("l10n_au_medicare_params")[employee.l10n_au_scale]
result = payslip._l10n_au_compute_medicare_adjustment(categories['GROSS'], contract.schedule_pay, params)
        </field>
        <field name="struct_id" ref="l10n_au_hr_payroll.hr_payroll_structure_au_regular"/>
    </record>

    <record id="l10n_au_withholding_net_structure_1" model="hr.salary.rule">
        <field name="category_id" ref="l10n_au_hr_payroll.rule_category_net_withholding"/>
        <field name="name">Total Withholding Amount</field>
        <field name="code">WITHHOLD.TOTAL</field>
        <field name="sequence">160</field>
        <field name="amount_select">code</field>
        <field name="amount_python_compute">
result = categories['WITHHOLD'] + min(-categories['WITHHOLD'], categories["WITHHOLD.OFFSET"])
        </field>
        <field name="struct_id" ref="l10n_au_hr_payroll.hr_payroll_structure_au_regular"/>
    </record>

    <record id="l10n_au_child_support_structure_1" model="hr.salary.rule">
        <field name="category_id" ref="l10n_au_hr_payroll.rule_category_child_support"/>
        <field name="name">Child Support</field>
        <field name="code">CHILD.SUPPORT</field>
        <field name="sequence">190</field>
        <field name="condition_select">python</field>
        <field name="condition_python">result = employee.l10n_au_child_support_deduction or employee.l10n_au_child_support_garnishee</field>
        <field name="amount_select">code</field>
        <field name="amount_python_compute">
net_salary = categories['BASIC'] + categories['ALW'] + categories['DED']
result = -payslip._l10n_au_compute_child_support(net_salary)
        </field>
        <field name="struct_id" ref="l10n_au_hr_payroll.hr_payroll_structure_au_regular"/>
    </record>

    <record id="l10n_au_allowance_structure_1" model="hr.salary.rule">
        <field name="category_id" ref="hr_payroll.ALW"/>
        <field name="name">Allowance</field>
        <field name="sequence">199</field>
        <field name="code">ALW</field>
        <field name="condition_select">python</field>
        <field name="condition_python">result = payslip.input_line_ids.filtered(lambda x: x.input_type_id.l10n_au_is_allowance)</field>
        <field name="amount_select">code</field>
        <field name="amount_python_compute">
allowances = payslip.input_line_ids.filtered(lambda x: x.input_type_id.l10n_au_is_allowance)
result = sum(allowances.mapped('amount'))
        </field>
        <field name="struct_id" ref="l10n_au_hr_payroll.hr_payroll_structure_au_regular"/>
    </record>

    <record id="l10n_au_super_contribution_structure_1" model="hr.salary.rule">
        <field name="category_id" ref="l10n_au_hr_payroll.rule_category_super_contribution"/>
        <field name="name">Super Guarantee</field>
        <field name="code">SUPER</field>
        <field name="sequence">300</field>
        <field name="amount_select">code</field>
        <field name="amount_python_compute">
rate = payslip._rule_parameter("l10n_au_withholding_super")
result = categories['GROSS'] * rate/100 + contract.l10n_au_salary_sacrifice_superannuation
        </field>
        <field name="struct_id" ref="l10n_au_hr_payroll.hr_payroll_structure_au_regular"/>
    </record>

    <!-- Include Extra Pay in NET -->
    <function model="hr.salary.rule" name="write">
        <value model="hr.salary.rule" search="[
            ('struct_id', '=', ref('l10n_au_hr_payroll.hr_payroll_structure_au_regular')),
            ('code', '=', 'NET')]"/>
        <value eval="{
            'amount_python_compute': &quot;result = categories['BASIC'] + categories['ALW'] + categories['DED'] + result_rules['GROSS.COMMISSION']['total']&quot;
        }"/>
    </function>
</odoo>
